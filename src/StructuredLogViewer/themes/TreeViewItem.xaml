<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:l="clr-namespace:Microsoft.Build.Logging.StructuredLogger;assembly=StructuredLogger"
                    xmlns:local="clr-namespace:Microsoft.Build.Logging.StructuredLogger"
                    xmlns:core="clr-namespace:Microsoft.Build.Logging.StructuredLogger;assembly=StructuredLogViewer.Core"
                    xmlns:controls="clr-namespace:StructuredLogViewer.Controls"
                    xmlns:s="clr-namespace:StructuredLogViewer">

  <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />

  <!--=================================================================
        TreeViewItem
    ==================================================================-->

  <SolidColorBrush x:Key="&#465;" Color="#FF818181"/>
  <SolidColorBrush x:Key="&#466;" Color="#FFFFFFFF"/>
  <SolidColorBrush x:Key="&#467;" Color="#FF27C7F7"/>
  <SolidColorBrush x:Key="&#468;" Color="#FFCCEEFB"/>
  <SolidColorBrush x:Key="&#469;" Color="#FF262626"/>
  <SolidColorBrush x:Key="&#470;" Color="#FF595959"/>
  <SolidColorBrush x:Key="&#471;" Color="#FF1CC4F7"/>
  <SolidColorBrush x:Key="&#472;" Color="#FF82DFFB"/>

  <PathGeometry x:Key="&#473;">
    <PathGeometry.Figures>
      <PathFigureCollection>
        <PathFigure IsFilled="True" StartPoint="0 0" IsClosed="True">
          <PathFigure.Segments>
            <PathSegmentCollection>
              <LineSegment Point="0 6"/>
              <LineSegment Point="6 0"/>
            </PathSegmentCollection>
          </PathFigure.Segments>
        </PathFigure>
      </PathFigureCollection>
    </PathGeometry.Figures>
  </PathGeometry>
  <Style x:Key="&#474;" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Width" Value="16"/>
    <Setter Property="Height" Value="16"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Width="16"
                  Height="16"
                  Background="Transparent"
                  Padding="5,5,5,5">
            <Path x:Name="ExpandPath"
                  Fill="{StaticResource &#466;}"
                  Stroke="{StaticResource &#465;}"
                  Data="{StaticResource &#473;}">
              <Path.RenderTransform>
                <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
              </Path.RenderTransform>
            </Path>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="ExpandPath" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                </Setter.Value>
              </Setter>
              <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource &#470;}"/>
              <Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource &#469;}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource &#467;}"/>
              <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource &#468;}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
                <Condition Property="IsChecked" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="ExpandPath" Property="Stroke" Value="{StaticResource &#471;}"/>
              <Setter TargetName="ExpandPath" Property="Fill" Value="{StaticResource &#472;}"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="&#475;">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type TreeViewItem}"
         TargetType="{x:Type TreeViewItem}">
    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
    <Setter Property="Visibility" Value="{Binding IsVisible, Mode=TwoWay, Converter={StaticResource booleanToVisibilityConverter}}" />
    <Setter Property="Background"
            Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Padding"
            Value="1,0,0,0"/>
    <Setter Property="Foreground"
            Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="FocusVisualStyle"
            Value="{StaticResource &#475;}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="19" Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Expander"
                          Style="{StaticResource &#474;}"
                          IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"
                          ClickMode="Press"/>
            <Border Name="Bd"
                    Grid.Column="1"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    SnapsToDevicePixels="true">
              <ContentPresenter x:Name="PART_Header"
                                ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
            <Ellipse x:Name="SearchResult"
                     Grid.Column="1"
                     Width="6" Height="6" Margin="1,1,0,0" StrokeThickness="1"
                     HorizontalAlignment="Left" VerticalAlignment="Top"
                     Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="false">
              <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </Trigger>
            <DataTrigger Binding="{Binding ContainsSearchResult}" Value="True">
              <Setter TargetName="SearchResult" Property="Visibility" Value="Visible" />
              <Setter TargetName="SearchResult" Property="Fill" Value="{DynamicResource ContainsSearchResultBrush}" />
              <Setter TargetName="SearchResult" Property="Stroke" Value="{DynamicResource ContainsSearchResultStroke}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSearchResult}" Value="True">
              <Setter TargetName="SearchResult" Property="Visibility" Value="Visible" />
              <Setter TargetName="SearchResult" Property="Fill" Value="{DynamicResource SearchResultBrush}" />
              <Setter TargetName="SearchResult" Property="Stroke" Value="{DynamicResource SearchResultStroke}" />
            </DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="true"/>
                <Condition Property="IsSelectionActive" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True"/>
                <Condition Property="IsSelectionActive" Value="False"/>
                <Condition Property="controls:ContextMenuUtilities.IsContextMenuOpen" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>

</ResourceDictionary>