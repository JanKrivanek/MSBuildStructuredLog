// // <auto-generated/>
// using FluentAssertions;
// using Moq;
// using StructuredLogger.BinaryLogger;
// using System;
// using System.Collections.Generic;
// using Xunit;
// 
// namespace StructuredLogger.BinaryLogger.UnitTests
// {
//     /// <summary>
//     /// Unit tests for the <see cref="BuildCheckTracingEventArgs"/> class.
//     /// </summary>
//     public class BuildCheckTracingEventArgsTests
//     {
//         /// <summary>
//         /// Tests the constructor of BuildCheckTracingEventArgs with an empty dictionary.
//         /// Expected outcome: TracingData property should match the provided empty dictionary.
//         /// </summary>
//         [Fact]
//         public void Constructor_WithEmptyDictionary_SetsTracingDataProperty()
//         {
//             // Arrange
//             var emptyDictionary = new Dictionary<string, TimeSpan>();
// 
//             // Act
//             var eventArgs = new BuildCheckTracingEventArgs(emptyDictionary);
// 
//             // Assert
//             eventArgs.TracingData.Should().BeEquivalentTo(emptyDictionary);
//         }
// 
//         /// <summary>
//         /// Tests the constructor of BuildCheckTracingEventArgs with a valid dictionary.
//         /// Expected outcome: TracingData property should match the provided dictionary.
//         /// </summary>
//         [Fact]
//         public void Constructor_WithValidTracingData_SetsTracingDataProperty()
//         {
//             // Arrange
//             var tracingData = new Dictionary<string, TimeSpan>
//             {
//                 { "Operation1", TimeSpan.FromSeconds(30) },
//                 { "Operation2", TimeSpan.FromMinutes(2) }
//             };
// 
//             // Act
//             var eventArgs = new BuildCheckTracingEventArgs(tracingData);
// 
//             // Assert
//             eventArgs.TracingData.Should().BeEquivalentTo(tracingData);
//         }
// 
//         /// <summary>
//         /// Tests the constructor of BuildCheckTracingEventArgs with extreme TimeSpan values.
//         /// Expected outcome: TracingData property should contain the extreme TimeSpan values.
//         /// </summary>
//         [Fact]
//         public void Constructor_WithExtremeTimeSpanValues_SetsTracingDataProperty()
//         {
//             // Arrange
//             var tracingData = new Dictionary<string, TimeSpan>
//             {
//                 { "MinValue", TimeSpan.MinValue },
//                 { "MaxValue", TimeSpan.MaxValue }
//             };
// 
//             // Act
//             var eventArgs = new BuildCheckTracingEventArgs(tracingData);
// 
//             // Assert
//             eventArgs.TracingData.Should().BeEquivalentTo(tracingData);
//         }
//     }
// 
//     /// <summary>
//     /// Unit tests for the <see cref="BuildCheckAcquisitionEventArgs"/> class.
//     /// </summary>
//     public class BuildCheckAcquisitionEventArgsTests
//     {
//         /// <summary>
//         /// Tests the constructor of BuildCheckAcquisitionEventArgs with valid absolute paths.
//         /// Expected outcome: AcquisitionPath and ProjectPath properties should be set correctly.
//         /// </summary>
//         [Fact]
//         public void Constructor_WithValidAbsolutePaths_SetsProperties()
//         {
//             // Arrange
//             string acquisitionPath = @"C:\Acquisition\path";
//             string projectPath = @"/usr/project/path";
// 
//             // Act
//             var eventArgs = new BuildCheckAcquisitionEventArgs(acquisitionPath, projectPath);
// 
//             // Assert
//             eventArgs.AcquisitionPath.Should().Be(acquisitionPath);
//             eventArgs.ProjectPath.Should().Be(projectPath);
//         }
// 
//         /// <summary>
//         /// Tests the constructor of BuildCheckAcquisitionEventArgs with empty strings.
//         /// Expected outcome: AcquisitionPath and ProjectPath properties should be empty.
//         /// </summary>
//         [Fact]
//         public void Constructor_WithEmptyStrings_SetsProperties()
//         {
//             // Arrange
//             string acquisitionPath = string.Empty;
//             string projectPath = string.Empty;
// 
//             // Act
//             var eventArgs = new BuildCheckAcquisitionEventArgs(acquisitionPath, projectPath);
// 
//             // Assert
//             eventArgs.AcquisitionPath.Should().BeEmpty();
//             eventArgs.ProjectPath.Should().BeEmpty();
//         }
// 
//         /// <summary>
//         /// Tests the constructor of BuildCheckAcquisitionEventArgs with special characters in the paths.
//         /// Expected outcome: AcquisitionPath and ProjectPath properties should be set to the provided values containing special characters.
//         /// </summary>
//         [Fact]
//         public void Constructor_WithSpecialCharacterStrings_SetsProperties()
//         {
//             // Arrange
//             string acquisitionPath = @"\\Network\Path\!@#$%^&*()";
//             string projectPath = @"Relative\path\with\SPECIAL_Chars";
// 
//             // Act
//             var eventArgs = new BuildCheckAcquisitionEventArgs(acquisitionPath, projectPath);
// 
//             // Assert
//             eventArgs.AcquisitionPath.Should().Be(acquisitionPath);
//             eventArgs.ProjectPath.Should().Be(projectPath);
//         }
// 
//         /// <summary>
//         /// Tests the constructor of BuildCheckAcquisitionEventArgs with very long strings.
//         /// Expected outcome: AcquisitionPath and ProjectPath properties should match the provided long strings.
//         /// </summary>
//         [Fact]
//         public void Constructor_WithLongStrings_SetsProperties()
//         {
//             // Arrange
//             string longAcquisitionPath = new string('A', 1000);
//             string longProjectPath = new string('B', 1000);
// 
//             // Act
//             var eventArgs = new BuildCheckAcquisitionEventArgs(longAcquisitionPath, longProjectPath);
// 
//             // Assert
//             eventArgs.AcquisitionPath.Should().Be(longAcquisitionPath);
//             eventArgs.ProjectPath.Should().Be(longProjectPath);
//         }
//     }
// 
//     /// <summary>
//     /// Unit tests for the <see cref="BuildCheckResultMessage"/> class.
//     /// </summary>
//     public class BuildCheckResultMessageTests
//     {
// //         /// <summary> // [Error] (177-27)CS0122 'BuildEventArgs.RawMessage' is inaccessible due to its protection level
// //         /// Tests the constructor of BuildCheckResultMessage with a typical message.
// //         /// Expected outcome: RawMessage property should be set to the provided message.
// //         /// </summary>
// //         [Fact]
// //         public void Constructor_WithValidMessage_SetsRawMessage()
// //         {
// //             // Arrange
// //             string message = "Build completed successfully.";
// // 
// //             // Act
// //             var resultMessage = new BuildCheckResultMessage(message);
// // 
// //             // Assert
// //             resultMessage.RawMessage.Should().Be(message);
// //         }
// //  // [Error] (194-27)CS0122 'BuildEventArgs.RawMessage' is inaccessible due to its protection level
//         /// <summary>
//         /// Tests the constructor of BuildCheckResultMessage with an empty message.
//         /// Expected outcome: RawMessage property should be empty.
//         /// </summary>
//         [Fact]
//         public void Constructor_WithEmptyMessage_SetsRawMessage()
//         {
//             // Arrange
//             string message = string.Empty;
// 
//             // Act
//             var resultMessage = new BuildCheckResultMessage(message);
// 
//             // Assert
//             resultMessage.RawMessage.Should().BeEmpty();
//         }
// //  // [Error] (211-27)CS0122 'BuildEventArgs.RawMessage' is inaccessible due to its protection level
// //         /// <summary>
// //         /// Tests the constructor of BuildCheckResultMessage with a message containing special characters.
// //         /// Expected outcome: RawMessage property should match the provided special character message.
// //         /// </summary>
// //         [Fact]
// //         public void Constructor_WithSpecialCharacterMessage_SetsRawMessage()
// //         {
// //             // Arrange
// //             string message = "!@#$%^&*()_+|~=`{}[]:\";'<>?,./";
// // 
// //             // Act
// //             var resultMessage = new BuildCheckResultMessage(message);
// // 
// //             // Assert
// //             resultMessage.RawMessage.Should().Be(message);
// //         }
// //  // [Error] (228-27)CS0122 'BuildEventArgs.RawMessage' is inaccessible due to its protection level
//         /// <summary>
//         /// Tests the constructor of BuildCheckResultMessage with an extremely long message.
//         /// Expected outcome: RawMessage property should match the provided long message.
//         /// </summary>
//         [Fact]
//         public void Constructor_WithLongMessage_SetsRawMessage()
//         {
//             // Arrange
//             string message = new string('X', 2000);
// 
//             // Act
//             var resultMessage = new BuildCheckResultMessage(message);
// 
//             // Assert
//             resultMessage.RawMessage.Should().Be(message);
//         }
//     }
// }